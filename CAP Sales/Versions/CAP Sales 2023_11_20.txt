import requests
import pandas as pd
import csv
import xml.etree.ElementTree as ET
from datetime import datetime
import logging
from concurrent.futures import ThreadPoolExecutor
import os
from threading import Lock

# Configure the error log file path
error_log_path = r'D:\Tom\Python Scripts\CAP\CAP Sales\CAP_Sales_errors.log'
logging.basicConfig(filename=error_log_path, level=logging.ERROR,
                    format='%(asctime)s [Registration:%(registration)s] %(message)s', datefmt='%Y-%m-%d %H:%M:%S')

# Constants
URL = 'https://soap.cap.co.uk/usedvalueslive/capusedvalueslive.asmx/GetUsedLive_IdRegDateMileage'
HEADERS = {'Content-Type': 'application/x-www-form-urlencoded'}
SUBSCRIBER_ID = '101148'
PASSWORD = 'DRM148'
DATABASE = 'CAR'
VALUATION_DATE = '2023-09-28'
input_csv_path = r'D:\Tom\Python Scripts\CAP\CAP Sales\CAP_Sales_Input.csv'
output_csv_base_path = r'D:\Tom\Python Scripts\CAP\CAP Sales\CAP_Sales_Output.csv'
NAMESPACE = {'ns': 'https://soap.cap.co.uk/usedvalueslive'}

df = pd.read_csv(input_csv_path)

print_lock = Lock()

def round_up_to_nearest_thousand(mileage):
    return int((mileage + 999) / 1000) * 1000

def fetch_valuation(payload, registration, capid, row_num, total_rows, session):
    with print_lock:
        print(f'Processing row {row_num} of {total_rows}, Registration: {registration}, CapID: {capid}, Mileage: {payload["mileage"]}')
    response = session.post(URL, headers=HEADERS, data=payload)
    if response.status_code != 200:
        logging.error(f"Server returned status code {response.status_code}: {response.content}",
                      extra={'registration': registration, 'capid': capid})
        return None
    root = ET.fromstring(response.content)
    valuation = root.find('.//ns:Valuation', NAMESPACE)
    if valuation is None:
        logging.error(f"Valuation element missing in the XML response: {ET.tostring(root).decode()}",
                      extra={'registration': registration, 'capid': capid})
        return None
    return valuation

output_rows = []

with ThreadPoolExecutor() as executor, requests.Session() as session:
    futures = []
    for idx, row in enumerate(df.itertuples(), 1):
        reg_date = datetime.strptime(row.DateFirstRegistered, '%d/%m/%Y').strftime('%Y-%m-%d')
        rounded_mileage = round_up_to_nearest_thousand(row.Mileage)
        capid = int(row.CapID) if not pd.isna(row.CapID) else None

        payload = {
            'subscriberId': SUBSCRIBER_ID,
            'password': PASSWORD,
            'database': DATABASE,
            'capid': capid,
            'valuationDate': VALUATION_DATE,
            'regDate': reg_date,
            'mileage': rounded_mileage
        }
        row = row._asdict()
        row['ValuationDate'] = VALUATION_DATE
        df.loc[idx - 1] = pd.Series(row)

        future = executor.submit(fetch_valuation, payload, row['Registration'], capid, idx, len(df), session)
        futures.append((future, payload, row, capid))

    for future, payload, row, capid in futures:
        valuation = future.result()
        rounded_mileage_10000 = None
        clean = retail = ''
        if valuation is not None:
            clean_element = valuation.find('ns:Clean', NAMESPACE)
            retail_element = valuation.find('ns:Retail', NAMESPACE)
            clean = clean_element.text if clean_element is not None else ''
            retail = retail_element.text if retail_element is not None else ''
            if not clean or not retail:
                rounded_mileage_10000 = round(payload['mileage'] / 10000) * 10000
                if rounded_mileage_10000 != payload['mileage']:
                    retry_payload = payload.copy()
                    retry_payload['mileage'] = rounded_mileage_10000
                    valuation = fetch_valuation(retry_payload, row['Registration'], capid, idx, len(df), session)
                    if valuation is not None:
                        clean_element = valuation.find('ns:Clean', NAMESPACE)
                        retail_element = valuation.find('ns:Retail', NAMESPACE)
                        clean = clean_element.text if clean_element is not None else ''
                        retail = retail_element.text if retail_element is not None else ''

            if not clean or not retail:
                error_message = f"Clean or Retail is blank for Registration: {row['Registration']}, CapID: {capid}. XML Response: {ET.tostring(valuation).decode()}"
                logging.error(error_message, extra={'registration': row['Registration'], 'capid': capid})

        output_row = [row['Registration'], payload['mileage'], capid, row['DateFirstRegistered'], clean, retail, VALUATION_DATE, rounded_mileage_10000]
        output_rows.append(output_row)

output_csv_path = output_csv_base_path
if os.path.exists(output_csv_path):
    base, ext = os.path.splitext(output_csv_base_path)
    output_csv_path = f"{base}_{datetime.now().strftime('%Y%m%d%H%M%S')}{ext}"

with open(output_csv_path, 'w', newline='') as f_output:
    csv_writer = csv.writer(f_output)
    csv_writer.writerow(['VRM', 'mileage', 'capid', 'regDate', 'Clean', 'Retail', 'ValuationDate', 'Mileage10000'])
    csv_writer.writerows(output_rows)

df.to_csv(input_csv_path, index=False)
